infrastructure:
  - title: Account configuration
    description: |
      A best practices multi-account set up using <a href="/landing-zone-for-aws">Gruntwork Landing Zone for AWS</a>.

  - title: Network Topology
    description: |
      For each environment, create a VPC with multiple subnet tiers, route tables, NAT Gateways, Network ACLs, Flow logs, etc.

  - title: Server cluster
    description: |
      Choose from a Docker Cluster (backed by Amazon EC2 Container Service or  Amazon EC2 Kubernetes Service) or Auto Scaling Groups.

  - title: Load balancer
    description: |
      Public AWS Application Load Balancer for customer-facing services, and private ALBs for internal services.

  - title: Database
    description: |
      Choose a supported RDS database, such as Aurora, MySQL, PostgreSQL, MariaDB, Oracle, or SQL Server.

  - title: Cache
    description: |
      Choose a Redis or Memcached distributed Elasticache cache cluster.

  - title: Static content
    description: |
      Deploy your images, CSS, and JS into an S3 bucket and configure a CloudFront CDN in front of it.

  - title: Bastion host
    description: |
      Choose from either a plain Linux host or an OpenVPN server as a remote access network bastion.

  - title: CI server
    description: |
      Choose from GitHub Actions or CircleCI.

  - title: Sample frontend app
    description: |
      A sample frontend application that shows how to package the code using Docker or Packer, how to manage
      configuration across multiple environments, how to store application secrets, how to do service discovery to talk
      to a backend app, and how to run the entire stack in the dev environment.

  - title: Sample backend app
    description: |
      A sample backend application that shows how to package the code using Docker or Packer, how to manage
      configuration across multiple environments, how to store application secrets, how to talk to the database and cache,
      and how to apply schema migrations.

  - title: Serverless
    description: |
      Optionally deploy serverless functions using Terraform.

configuration:
  - title: Environments
    description: |
      Choose the isolated environments you want to create: e.g., dev, qa, stage, prod.

  - title: Encryption
    description: |
      Encryption is enabled by default, including encrypted AMIs, EBS volumes, TLS certificates via AWS Certificate
      Manager, and everywhere else.

  - title: Infrastructure pipeline
    description: |
      Set up a workflow for infrastructure code using <a href="/pipelines">Gruntwork Pipelines</a>.

  - title: Automated build &amp; deployment (CI / CD)
    description: |
      Run a build after every commit to test your code, package it using Docker or Packer, and, for commits to
      certain branches or tags, automatically deploy that Docker or Packer image to specific environments.

  - title: Monitoring
    description: |
      Configure metrics in CloudWatch.

  - title: Alerting
    description: |
      Configure alerts on key metrics: e.g., high CPU usage on EC2 instances, too many 4xx or 5xx errors on
      load balancers, low disk space on your database.

  - title: Log aggregation
    description: |
      Centralize all server logs in CloudWatch Logs for easier searching and filtering.

  - title: DNS
    description: |
      Configure your domain name(s) using Amazon Route 53.

security:
  - title: SSL/TLS
    description: |
      Create SSL/TLS certificates for your domain names.

  - title: Server hardening
    description: |
      Configure every server to run fail2ban and to automatically install critical security patches on a nightly basis.

  - title: SSH management
    description: |
      Install ssh-grunt on every server, which allows admins to grant or revoke SSH access using your identity provider
      (e.g., IAM, Google, Active Directory) and for each developer to be able to use their own username and SSH key to
      connect to servers.

  - title: Secrets management
    description: |
      Use Secrets Manager to securely encrypt and decrypt application secrets, such as database passwords.

  - title: Account security
    description: |
      Enable centralized audit logging for all of your API calls. Create best practices IAM groups and policies for user and
      permissions management.

  - title: Threat detection
    description: |
      Use Amazon GuardDuty to monitor for malicious and unauthorized behavior in your environment.

  - title: Resource configuration
    description: |
      Enable AWS Config with a best practices set of Config Rules to monitor for anomalous behavior.

design:
  - title: High Availability
    description: |
      All aspects of the architecture are designed for high availability: e.g., all servers are deployed across multiple
      Availability Zones; load balancers perform health checks and automatically replace failed servers; the load
      balancers themselves run multiple servers and do automatic failover; the database and cache can also do automatic
      failover to standby servers in another Availability Zone; data is automatically backed up on a nightly basis.

  - title: Scalability
    description: |
      All aspects of the architecture support easy vertical and horizontal scalability: auto scaling policies
      resize the server cluster in response to load; the load balancers will automatically scale up and down
      in response to load; you can configure read replicas for your database and cache clusters.

  - title: Infrastructure as code
    description: |
      You get 100% of the source code for everything in the Reference Architecture. It is written using a variety of
      tools, including Terragrunt, Terraform, Packer, Docker, Go, Python, and Bash.

  - title: Built for teams
    description: |
      With Gruntwork Pipelines, every change is centralized, peer-reviewed, and audited, all using code. Use the pipeline
      for your infrastructure <i>and</i> application deployments!

  - title: Documentation
    description: |
      Comprehensive written and video documentation of everything included in the Reference Architecture.
