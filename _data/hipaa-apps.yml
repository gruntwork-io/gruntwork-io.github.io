features:
  - title: Service discovery
    description: Your app has to do the right thing to use service discovery. That might be looking up service endpoints via env vars; or DNS; or IPs; or a client-library.
    available: "yes"

  - title: Service mesh
    description: After finding a service, you also need to authenticate to it, encrypt the communication channel, balance the load, route traffic in specific ways.
    available: "yes"

  - title: Service Resilience
    description: when talking to other services, especially at large scale, you need to think through things like retries, exponential back-off, jitter, circuit breakers, thread management, async I/O, throttling, error handling, and a ton of other concerns.
    available: "yes"

  - title: Metrics / observability
    description: Our modules use encryption by default. Databases, disk volumes, S3 buckets, and machine images are all encrypted. Network connections are encrypted.
    available: "yes"

  - title: Logging
    description: In a Dockerized world, you “just” send logs to stdout/stderr and everything supposedly works… But that is a vast simplification.
    available: "yes"

  - title: Packaging
    description: Knowing how to Dockerize an app properly is surprisingly hard. You have to balance small base images vs secure/up-to-date base images. You have to be thoughtful about how you use the Docker Layer Cache.
    available: "yes"

  - title: Secrets management
    description: Although you are likely to rely on an external service to store or encrypt the secret (e.g., AWS Secrets Manager, Vault, KMS, K8S), the app still has to do the right thing to use that secret.
    available: "yes"

  - title: App configuration
    description: Figuring out how to configure an app differently in different environments (dev, stage, prod, etc) is very tricky. You can use config files in JSON, YAML, or a thousand other formats;
    available: "yes"

  - title: Database management
    description: You have to do schema migrations using tools like Flyway, ActiveRecord, Phinx, etc. You may have to run those before the app boots or as a separate deploy step.
    available: "yes"

  - title: Server hardening
    description: If you run on EC2, there are a number of server hardening tasks you have to do.
    available: "yes"

  - title: Build system
    description: Every app / framework has one that you have to configure. For Spring Boot, that’s mostly Gradle these days.
    available: "yes"

  - title: Automated tests
    description: Everyone wastes a huge amount of time setting up scaffolding for this. It should be available out of the box
    available: "yes"

  - title: Asset pipeline
    description: If your app depends on static content, you typically have to solve asset compilation (e.g., compile TypeScript to JS), minification, concatenation, fingerprinting, deployment to CDN, and making the URLs work in dev & prod.

    available: "yes"

  - title: Security baseline
    description: Every app needs a baseline of security features, such as CSRF protection, XSS protection (esp in the templating language), security headers, OS user you run as, authn / authz filter, and so on.
    available: "yes"
