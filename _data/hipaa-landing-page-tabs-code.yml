- id: bash-read-aws-secrets-manager
  title: redis.js
  content: |
    <figure>
      <pre>
      <code class="language-js">
      /***************************
       * How to interact with Redis
       **************************/
      const redis = require("redis");
      const util = require("../util/util");

      /**
       * Set the given key-value pair in Redis.
       * @param cacheConfig - An object that contains the cache config, including the engine, host, and port.
       * @param key - The key.
       * @param value - The value.
       * @param expirationSeconds - After how long the key should expire, in seconds.
       * @returns {Promise<any>}
       */
      exports.set = (cacheConfig, key, value, expirationSeconds) => {
        const client = getClient(cacheConfig);
        return new Promise((resolve, reject) => {
          client.set(key, value, 'EX', expirationSeconds, (err, response) => {
            if (err) {
              reject(err);
            } else {
              resolve(response);
            }
          });
        });
      };
         </code>
          </pre>
          <figure>
- id: database
  title: database.js
  content: |
    <figure>
      <pre>
      <code class="language-javascript">
      /****************************************************
      * How to use config to connect to a database securely
      *****************************************************/

      const { sendBackendResponse, sendResponse } = require("../views/views.jsx");
      const db = require("../models/db");
      const config = require("config");
      const { urlsToTry, supportChannels } = require("../models/sample-app");
      const util = require("util");
      const { hasConfig } = require("../util/util");

      /**
       * An example of how to run a database query and show the response on the page.
       *
       * @param req
       * @param res
       * @returns {Promise<void>}
       */
        exports.dbExample = async (req, res) => {
        if (!hasConfig("database")) {
          const data = {
            title: "Not Found",
            message: "This sample app does not have a 'database' configuration, so the database example is disabled!",
            urlsToTry,
            supportChannels
          };
          sendResponse(res, "error", data, 404);
          return
        }

        const dbConfig = config.get("database");
        const engine = dbConfig.get("engine");

        const query = "SELECT 1 + 1 AS solution";
        const result = await db.runQuery(dbConfig, query);

          throw new Error(`Expected to get a result with 1 row, but instead got: ${util.inspect(result)}`);
        }

        const solution = result[0].solution;

        const data = {
          engine,
          query,
          solution,
          urlsToTry,
          supportChannels
        };

        // This endpoint is only enabled for the backend, so call sendBackendResponse directly instead of sendResponse
        sendBackendResponse(res, data);
      };
      </code>
      </pre>
      <figure>
- id: servicediscovery
  title: services.js
  content: |
    <figure>
      <pre>
      <code class="language-js">
     /****************************************************
      * How to discover and call other services
      *****************************************************/

      const { sendResponse } = require("../views/views.jsx");
      const service = require("../models/service");
      const config = require("config");
      const { urlsToTry, supportChannels } = require("../models/sample-app");
      const { hasConfig } = require("../util/util");

      /**
       * An example of how to make a service call to a backend service and show the response on the page.
       *
       * @param req
       * @param res
       * @returns {Promise<void>}
       */
      exports.serviceCallExample = async (req, res) => {
        const serviceName = req.params["serviceName"];

        if (!hasConfig("services")) {
          const data = {
            title: "Not Found",
            message: "This sample app does not have a 'services' configuration, so the service call examples are disabled!",
            urlsToTry,
            supportChannels
          };
          sendResponse(res, "error", data, 404);
          return
        }

        const services = config.get("services");
        const serviceConfig = services[serviceName];

        if (!serviceConfig) {
          const data = {
            title: "Request Error",
            message: `This sample app does not have a 'services' configuration for service '${serviceName}'.`,
            urlsToTry,
            supportChannels
          };
          sendResponse(res, "error", data, 400);
          return
        }

        const servicePathRaw = req.params["0"] || "";
        const servicePath = servicePathRaw.startsWith("/") ? servicePathRaw : `/${servicePathRaw}`;

        const serviceResponse = await service.makeServiceCall(serviceConfig, serviceName, servicePath);

        const data = {
          title: "Service Call Example",
          serviceName,
          servicePath,
          serviceResponse: JSON.stringify(serviceResponse, null, 2),
          urlsToTry,
          supportChannels
        };
        sendResponse(res, "service", data);
      };


            </code>
      </pre>
      <figure>
