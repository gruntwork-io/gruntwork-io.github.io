- item: "Preparing an app"
  heroku:
    - "Store your app code in Git."
    - "Create a <code>Procfile</code>."
  diy:
    - "Research the 20+ different options for running apps on AWS: e.g: EC2, ECS, EKS, Fargate, Elastic Beanstalk, App Runner, Lambda, etc."
    - "Research how to prepare your app for each option: e.g:, for EC2, you may package it as an AMI using Packer, for ECS you may package it as a Docker image using a <code>Dockerfile</code>, etc."
    - "Pick an option and do the work to prepare your app."
  gruntwork:
    - "Store your app code in Git."
    - "Run <code>grunty package</code>."
- item: "Creating an app"
  heroku:
    - "Run <code>heroku create</code>."
    - "Alternatively, make a few clicks in the Heroku web UI."
  diy:
    - "Research the 20+ different ways to create an app in AWS: e.g:, EC2, ECS, EKS, Fargate, Elastic Beanstalk, App Runner, Lambda, etc."
    - "Research all the other services you have to also configure for each option: e.g., VPCs, ALBs, Security Groups, IAM Roles, IAM profiles, Service Roles, clusters, control planes, etc."
  gruntwork:
    - "Run <code>grunty create</code>."
    - "Alternatively, make a few clicks in the Gruntwork web UI."
    - "Either option generates opinionated, proven, end-to-end code, that sets up everything you need to migrate your apps to AWS."


# - item: "Deploying an app"
#   heroku: "you run <em>git push heroku main</em> to deploy."
#   diy: "Each of the 20+ different ways to run apps in AWS (e.g., EC2, ECS, EKS, Fargate, Elastic Beanstalk, App Runner, Lambda, etc.) supports different deployment options (e.g., some support zero-downtime deployments natively, some don't, some have native CI / CD integration, some don't), so you spend hours more setting this up via the AWS CLI or AWS web UI."
#   gruntwork: "you run <em>git push origin <env></em> to deploy to environment <em><env></em>, such as </em>stage</em> or <em>prod</em>."
# - item: "Scaling the app"
#   heroku: "You run <em>heroku ps:scale</em> to scale the number of dynos up and down."
#   diy: "Each of the 20+ different ways to run apps in AWS (e.g., EC2, ECS, EKS, Fargate, Elastic Beanstalk, App Runner, Lambda, etc.) supports different scaling options, so you spend hours more learning about auto scaling, CloudWatch metrics, CloudWatch events, etc. In most cases, you fall back to manually scaling things via AWS CLI or AWS web UI."
#   gruntwork: "Migrate to AWS with Gruntwork: auto scaling is available out of the box, scaling resources as necessary based on load. You can tweak the settings in the code any time to customize this."
# - item: "Provision add-ons for monitoring"
#   heroku: "You run the <em>heroku addons:create</em> command to install add-ons such as Papertrail and New Relic for logging and metrics, respectively."
#   diy: "Each of the 20+ different ways to run apps in AWS (e.g., EC2, ECS, EKS, Fargate, Elastic Beanstalk, App Runner, Lambda, etc.) supports different monitoring options (e.g., some send logs to CloudWatch automatically, some do not), so you spend hours using the AWS CLI and UI trying to figure this all out."
#   gruntwork: "You run <em>grunty addons:create</em> or use the Gruntwork web UI to pick which monitoring tools you want (e.g., CloudWatch, DataDog, etc), and the generated code will hook everything up for you automatically."
# - item: "Provision a database"
#   heroku: "You run the <em>heroku addons:create</em> command to install database add-ons, such as Postgres."
#   diy: "You have to learn, configure, and set up each AWS database service (e.g., RDS, ElastiCache, Elasticsearch) separately. Each one takes hours of CLI commands or AWS UI clicks to set up and days to figure out how to do it securely. Hooking up your app to be able to securely connect and authenticate to these data stores takes still more time."
#   gruntwork: "You run <em>grunty addons:create</em> or use the Gruntwork web UI to pick which data stores you want, and you'll get production-grade code that sets everything up for you to deploy and manage that data store, as well as giving you sample code that shows you exactly how your app can connect to and authenticate to that data store securely."
