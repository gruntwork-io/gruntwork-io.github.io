- name: "AWS VPC"
  icons:
    - title: Terraform
      image: icon-terraform.png
  docs_url: "https://gruntwork.io/repos/terraform-aws-vpc"
  subscriber_url: "https://github.com/gruntwork-io/terraform-aws-vpc"
  type: Subscriber-Only
  description: |
    Create a best-practices Virtual Private Cloud (VPC) on AWS. Includes multiple subnet tiers, network ACLs, security
    groups, NAT gateways, Internet Gateways, and VPC peering.
  submodules:
    - name: vpc-app
      blurb: launch an app VPC
      description: Launch a VPC meant to house applications and production code. This module creates the VPC, 3 "tiers" of subnets (public, private app, private persistence) across all Availability Zones, route tables, routing rules, Internet gateways, and NAT gateways.
    - name: vpc-mgmt
      blurb: launch a mgmt VPC
      description: Launch a VPC meant to house internal tools (e.g. Jenkins, VPN server). This module creates the VPC, 2 "tiers" of subnets (public, private), route tables, routing rules, Internet gateways, and NAT gateways.
    - name: vpc-app-network-acls
      blurb: add NACLs to the app VPC
      description: Add a default set of Network ACLs to a VPC created using the vpc-app module that strictly control what inbound and outbound network traffic is allowed in each subnet of that VPC.
    - name: vpc-mgmt-network-acls
      blurb: add NACLs to the mgmt VPC
      description: Add a default set of Network ACLs to a VPC created using the vpc-mgmt module that strictly control what inbound and outbound network traffic is allowed in each subnet of that VPC.
    - name: vpc-peering
      blurb: peer VPCs in the same account
      description: Create peering connections between your VPCs to allow them to communicate with each other.
    - name: vpc-peering-external
      blurb: peer VPCs in different accounts
      description: Create peering connections between your VPCs and VPCs managed in other (external) AWS accounts.
    - name: vpc-flow-logs
      blurb: create VPC flow logs
      description: Create VPC flow logs to observe IP traffic in your VPCs.

- name: "Monitoring and Alerting"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
    - title: Python
      image: icon-python.png
  docs_url: "https://gruntwork.io/repos/terraform-aws-monitoring"
  subscriber_url: "https://github.com/gruntwork-io/terraform-aws-monitoring"
  type: Subscriber-Only
  description: |
    Configure monitoring, log aggregation, and alerting using CloudWatch, SNS, and S3. Includes Slack integration.
  submodules:
    - name: alarms
      blurb: create CloudWatch alarms for your AWS services
      description: A collection of more than 20 modules that set up CloudWatch Alarms for a variety of AWS services, such as CPU, memory, and disk space usage for EC2 Instances, Route 53 health checks for public endpoints, 4xx/5xx/connection errors for load balancers, and a way to send alarm notifications to a Slack channel.
    - name: logs
      blurb: aggregate all your logs in CloudWatch logs
      description: A collection of modules to set up log aggregation, including one to send logs from all of your EC2 instances to CloudWatch Logs, one to rotate and rate-limit logging so you don't run out of disk space, and one to store all load balancer logs in S3.
    - name: metrics
      blurb: collect metrics from your AWS services
      description: Modules that add custom metrics to CloudWatch, including critical metrics not visible to the EC2 hypervisor, such as memory usage and disk space usage.

- name: "EC2 Container Service (ECS)"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/module-ecs"
  subscriber_url: "https://github.com/gruntwork-io/module-ecs"
  type: Subscriber-Only
  description: |
    Deploy a best-practices ECS Cluster and run Docker containers on it as ECS Services. Includes zero-downtime,
    rolling deployments, and auto scaling.
  submodules:
    - name: ecs-cluster
      blurb: deploy an ECS cluster
      description: Deploy an Auto Scaling Group (ASG) that ECS can use for running Docker containers. The size of the ASG can be scaled up or down in response to load.
    - name: ecs-service
      blurb: deploy a service in your ECS cluster
      description: Deploy a Docker container as a long-running ECS Service. Includes support for automated, zero-downtime deployment, auto-restart of crashed containers, and automatic integration with the Elastic Load Balancer (ELB).
    - name: ecs-fargate
      blurb: deploy a service in ECS Fargate
      description: Deploy a Docker container as a long-running Fargate Service. A Fargate service automatically manages and scales your cluster as needed without you needing to manage the underlying EC2 instances or clusters, it also includes integration with an Application Load Balancer (ALB) or a Network Load Balancer (NLB).
    - name: ecs-service-with-alb
      blurb: deploy a service in your ECS cluster with an ALB
      description: Deploy a Docker container as a long-running ECS Service. Includes support for automated, zero-downtime deployment, auto-restart of crashed containers, and automatic integration with the Application Load Balancer (ALB).
    - name: ecs-deploy
      blurb: deploy a short-running task in your ECS cluster
      description: Deploy a Docker container as a short-running ECS Task, wait for it to exit, and exit with the same exit code as the ECS Task.

- name: "EC2 Kubernetes Service (EKS)"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Python
      image: icon-python.png
  private_beta: true
  docs_url: "https://gruntwork.io/repos/terraform-aws-eks"
  subscriber_url: "https://github.com/gruntwork-io/terraform-aws-eks"
  type: Subscriber-Only
  description: |
    Deploy a best-practices EKS cluster and run Docker containers on it as Kubernetes services. Supports zero-downtime,
    rolling deployment, IAM to RBAC mapping, auto scaling, IAM roles for Pods, deploying Helm securely with automated
    TLS certificate management, and heterogeneous worker groups.
  submodules:
    - name: eks-cluster-control-plane
      blurb: deploy the EKS control plane
      description: Deploy an EKS control plane managed by AWS with support to configure your local kubectl to authenticate with EKS.
    - name: eks-cluster-workers
      blurb: deploy a cluster of EKS workers
      description: Deploy a cluster of EC2 instances registered as Kubernetes workers with auto-recovery of failed nodes.
    - name: eks-k8s-role-mapping
      blurb: manage mappings between IAM and RBAC
      description: Manage mappings between IAM roles and RBAC groups as code for provisioning accounts that can access the Kubernetes API.
    - name: eks-vpc-tags
      blurb: tag your VPC for EKS
      description: Provides tags for your VPC to ensure Kubernetes uses it for allocating IP addresses to Pods and Services.
    - name: eks-cloudwatch-container-logs
      blurb: aggregate EKS logs to CloudWatch
      description: Deploys Helm chart that installs fluentd into your cluster to aggregate Kubernetes logs for shipping to CloudWatch.
    - name: eks-alb-ingress-controller
      blurb: use ALBs as ingress controllers
      description: Deploys Helm chart that installs the AWS ALB Ingress Controller into your cluster to map Ingress resources to ALBs.
    - name: eks-k8s-external-dns
      blurb: use Route53 for ingress hostnames
      description: Deploys Helm chart that installs the external-dns application into your cluster to map Ingress hostnames to Route 53 Domain records.

- name: "Kubernetes Services"
  icons:
    - title: Go
      image: icon-go.png
  public_url: "https://github.com/gruntwork-io/helm-kubernetes-services"
  type: Open Source
  description: |
    Package services into a best-practices deployment for Kubernetes. Supports zero-downtime, rolling deployment, RBAC
    roles and groups, auto scaling, secrets management, and centralized logging. Includes support for web services,
    daemon sets, and tasks / jobs.
  submodules:
    - name: k8s-service
      blurb: deploy a Kubernetes service using Helm
      description: Package your application service as a docker container and deploy to Kubernetes as a Deployment. Supports replication, rolling deployment, logging, configuration values, and secrets management.

- name: "Auto Scaling Group"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Python
      image: icon-python.png
  docs_url: "https://gruntwork.io/repos/module-asg"
  subscriber_url: "https://github.com/gruntwork-io/module-asg"
  type: Subscriber-Only
  description: |
    Run stateless and stateful services on top of an Auto Scaling Group. Supports zero-downtime, rolling deployment,
    attaching EBS volumes and ENIs, load balancing, health checks, service discovery, and auto scaling.
  submodules:
    - name: asg-rolling-deploy
      blurb: ASG that can do a rolling deployment
      description: Create an ASG that can do a zero-downtime rolling deployment.
    - name: server-group
      blurb: ASG with persistent EBS volumes and ENIs
      description: Run a fixed-size cluster of servers, backed by ASGs, that can automatically attach EBS Volumes and ENIs, while still supporting zero-downtime deployment.

- name: "AWS Load Balancer"
  icons:
    - title: Terraform
      image: icon-terraform.png
  docs_url: "https://gruntwork.io/repos/module-load-balancer"
  subscriber_url: "https://github.com/gruntwork-io/module-load-balancer"
  type: Subscriber-Only
  description: |
    Run the highly-available and scalable load balancers in AWS: Application Load Balancer (ALB), Network Load Balancer
    (NLB), and the Classic Load Balancer (CLB).
  submodules:
    - name: alb
      blurb: deploy an Application Load Balancer
      description: Deploy an Application Load Balancer (ALB) in AWS. It supports HTTP, HTTPS, HTTP/2, WebSockets, path-based routing, host-based routing, and health checks.
    - name: nlb
      blurb: deploy a Network Load Balancer
      description: Deploy a Network Load Balancer (NLB) in AWS. It supports TCP, WebSockets, static IPs, high throughputs, and health checks.
    - name: acm-tls-certificate
      blurb: create and validate a TLS certificate
      description: Create a free, auto-renewing TLS certificate using AWS Certificate Manager (ACM) and automatically validate it.

- name: "Lambda"
  icons:
    - title: Terraform
      image: icon-terraform.png
  docs_url: "https://gruntwork.io/repos/package-lambda"
  subscriber_url: "https://github.com/gruntwork-io/package-lambda"
  type: Subscriber-Only
  description: |
    Deploy and manage Lambda functions with Terraform and build serverless apps. Automatically upload source code,
    configure environment variables, create an IAM Role, associate with a VPC. enable versioning/aliasing. Also
    supports scheduled Lambdas and dead letter targets.
  submodules:
    - name: lambda
      blurb: deploy and manage a Lambda function
      description: Deploy and manage AWS Lambda functions. Includes support for automatically uploading your code to AWS, configuring an IAM role for your Lambda function, and giving your Lambda function access to your VPCs.
    - name: scheduled-lambda-job
      blurb: run a Lambda function on a scheduled basis
      description: Configure your Lambda function to run on a scheduled basis, like a cron job.
    - name: keep-warm
      blurb: keep a Lambda function warm
      description: This is a Lambda function you can use to invoke your other Lambda functions on a scheduled basis to keep those functions "warm," avoiding the cold start issue.
    - name: lambda-edge
      blurb: deploy and manage a Lambda@Edge function
      description: This module makes it easy to deploy and manage an AWS Lambda@Edge function. Lambda@Edge gives you a way to run code on-demand in AWS Edge locations without having to manage servers.

- name: "API Gateway"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Go
      image: icon-go.png
  docs_url: "https://gruntwork.io/repos/package-sam"
  subscriber_url: "https://github.com/gruntwork-io/package-sam"
  type: Subscriber-Only
  description: |
    Build serverless applications by defining APIs in Swagger, running your app locally using SAM, and deploying the
    app to production using Terraform and API Gateway.
  submodules:
    - name: gruntsam
      blurb: run and test API Gateway and Lambda locally
      description: CLI tool that allows you to define your APIs using Swagger, run and test your code locally using SAM, and deploy your code to production using API Gateway and Lambda.
    - name: api-gateway-account-settings
      blurb: configure API Gateway settings
      description: set the global (regional) settings required to allow API Gateway to write to CloudWatch logs.

- name: "Security"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
    - title: Go
      image: icon-go.png
  docs_url: "https://gruntwork.io/repos/module-security"
  subscriber_url: "https://github.com/gruntwork-io/module-security"
  type: Subscriber-Only
  description: |
    A collection of security best practices for managing secrets, credentials, and servers. Includes streamlined support
    for CloudTrail, KMS, SSH key management via IAM, IAM Groups, fail2ban, NTP, and OS hardening.
  submodules:
    - name: account-baseline-app
      blurb: account baseline for app accounts
      description: A security baseline for AWS Landing Zone for configuring the app accounts.
    - name: account-baseline-root
      blurb: account baseline for root accounts
      description: A security baseline for AWS Landing Zone for configuring the root account.
    - name: account-baseline-security
      blurb: account baseline for security accounts
      description: A security baseline for AWS Landing Zone for configuring the security accounts.
    - name: auto-update
      blurb: automatically patch servers
      description: Configure your servers to automatically install critical security patches.
    - name: aws-auth
      blurb: authenticate to AWS from the CLI
      description: A script that makes it much easier to use the AWS CLI with MFA and/or multiple AWS accounts.
    - name: aws-config
      blurb: enable the AWS Config service
      description: Enable AWS Config to monitor, audit, and assess an AWS account for compliance.
    - name: aws-config-multi-region
      blurb: enable the AWS Config service in all regions
      description: Enable AWS Config in all enabled regions for the AWS account.
    - name: aws-organizations
      blurb: manage AWS organizations
      description: Manage your AWS Organization and accounts that are part of it.
    - name: aws-organizations-config-rules
      blurb: AWS organizations config rules
      description: Configure a best-practices set of AWS Config Managed Rules for your organization.
    - name: cloudtrail
      blurb: configure audit logging in AWS
      description: Configure CloudTrail in an AWS account to audit all API calls.
    - name: guardduty
      blurb: enable the GuardDuty service
      description: Detect threats and monitor your AWS accounts for malicious activity and unauthorized behavior.
    - name: guardduty-multi-region
      blurb: enable the GuardDuty service in all regions
      description: Enable GuardDuty in all enabled regions for the AWS account.
    - name: kms-master-key
      blurb: create a KMS master key
      description: Create a master key in Amazon's Key Management Service and configure permissions for that key.
    - name: ssh-grunt
      blurb: manage SSH access via IAM
      description: Manage SSH access to your servers using an identity provider, such as AWS IAM groups. Every developer in a managed group you specify will be able to SSH to your servers using their own username and SSH key.
    - name: ssh-grunt-selinux-policy
      blurb: SELinux policy for ssh-grunt
      description: Install a SELinux Local Policy Module that is necessary to make ssh-grunt work on systems with SELinux, such as CentOS.
    - name: iam-groups
      blurb: create and manage IAM groups
      description: Create a best-practices set of IAM groups for managing access to your AWS account.
    - name: iam-policies
      blurb: create and manage IAM policies
      description: Create a set of IAM policy documents that can be used in IAM users, groups and roles.
    - name: custom-iam-entity
      blurb: create IAM groups and roles with managed policies
      description: Create an IAM group or role and attach a custom set of managed policies
    - name: iam-user-password-policy
      blurb: create an AWS account password policy
      description: Set the AWS Account Password Policy that will govern password requirements for IAM Users.
    - name: iam-users
      blurb: create and manage IAM users
      description: Create a set of IAM users for managing access to your AWS account.
    - name: cross-account-iam-roles
      blurb: create IAM roles for cross-account access
      description: Create IAM roles that allow IAM users to easily switch between AWS accounts.
    - name: saml-iam-roles
      blurb: allow federated access to AWS using SAML
      description: Allow access to AWS using federated identity providers via SAML.
    - name: fail2ban
      blurb: install fail2ban
      description: Install fail2ban on your servers to automatically ban malicious users.
    - name: os-hardening
      blurb: CIS hardening for Linux
      description: Build a hardened Linux-AMI that implements certain CIS benchmarks.
    - name: ntp
      blurb: install and configure NTP
      description: Install and configures NTP on a Linux server.
    - name: ip-lockdown
      blurb: block access to IPs
      description: Install ip-lockdown on your servers to automatically lock down access to specific IPs, such as locking down the EC2 metadata endpoint so only the root user can access it.

- name: "Continuous Delivery"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/module-ci"
  subscriber_url: "https://github.com/gruntwork-io/module-ci"
  type: Subscriber-Only
  description: |
    A collection of scripts and Terraform code that implement common CI and build pipeline tasks including running
    Jenkins, configuring CircleCi, building a Docker image, building a Packer image, updating Terraform code, pushing
    to git, sharing or making AMIs public, and configuring the build environment.
  submodules:
    - name: aws-helpers
      blurb: automate common AWS tasks
      description: Automate common AWS tasks, such as publishing AMIs to multiple regions.
    - name: build-helpers
      blurb: automate Docker and Packer builds
      description: Automate the process of building versioned, immutable, deployable artifacts, including Docker images and AMIs built with Packer.
    - name: circleci-helpers
      blurb: configure a CircleCi environment
      description: Configure the CircleCI environment, including installing Go and configuring GOPATH.
    - name: iam-policies
      blurb: IAM policies for CI servers
      description: Configure common IAM policies for CI servers, including policies for automatically pushing Docker containers to ECR, deploying Docker images to ECS, and using S3 for Terraform remote state.
    - name: terraform-helpers
      blurb: automate using Terraform in CI
      description: Automate common CI tasks that involve Terraform, such as automatically updating variables in a .tfvars file.
    - name: ec2-backup
      blurb: backup an EC2 instance on a schedule
      description: Run a Lambda function to make scheduled backups of EC2 Instances.
    - name: install-jenkins
      blurb: install Jenkins
      description: Install Jenkins on a Linux server.
    - name: jenkins-server
      blurb: deploy Jenkins
      description: Deploy a Jenkins server with an ASG, EBS Volume, ALB, and Route 53 settings.

- name: "Relational Database"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Python
      image: icon-python.png
  docs_url: "https://gruntwork.io/repos/module-data-storage"
  subscriber_url: "https://github.com/gruntwork-io/module-data-storage"
  type: Subscriber-Only
  description: |
    Run MySQL, Postgres, MariaDB, or Amazon Aurora on Amazon’s Relational Database Service (RDS) or Amazon Redshift.
    Creates the database, sets up replicas, configures multi-zone automatic failover and automatic backup.
  submodules:
    - name: rds
      blurb: deploy RDS for MySQL, PostgreSQL, Oracle, etc
      description: Deploy a relational database on top of RDS. Includes support for MySQL, PostgreSQL, Oracle, and SQL Server, as well as automatic failover, read replicas, backups, patching, and encryption.
    - name: aurora
      blurb: deploy RDS for Aurora
      description: Deploy Amazon Aurora on top of RDS. This is a MySQL-compatible database that supports automatic failover, read replicas, backups, patching, and encryption.
    - name: redshift
      blurb: deploy a Redshift cluster
      description: Deploy Amazon Redshift. This is a managed data warehouse that supports automatic failover, backups, patching, and encryption.
    - name: lambda-create-snapshot
      blurb: snapshot an RDS database on a schedule
      description: Create an AWS Lambda function that runs on a scheduled basis and takes snapshots of an RDS database for backup purposes. Includes an AWS alarm that goes off if backup fails.
    - name: lambda-share-snapshot
      blurb: share RDS snapshots with another account
      description: An AWS Lambda function that can automatically share an RDS snapshot with another AWS account. Useful for storing your RDS backups in a separate backup account.
    - name: lambda-copy-shared-snapshot
      blurb: copy RDS snapshots
      description: An AWS Lambda function that can make a local copy of an RDS snapshot shared from another AWS account. Useful for storing your RDS backups in a separate backup account.
    - name: lambda-cleanup-snapshots
      blurb: delete RDS snapshots
      description: An AWS Lambda function that runs on a scheduled basis to clean up old RDS database snapshots. Useful to ensure you aren't spending lots of money storing old snapshots you no longer need.

- name: "Distributed Cache"
  icons:
    - title: Terraform
      image: icon-terraform.png
  docs_url: "https://gruntwork.io/repos/module-cache"
  subscriber_url: "https://github.com/gruntwork-io/module-cache"
  type: Subscriber-Only
  description: |
    Run Redis or Memcached clusters using Amazon’s ElastiCache Service. Creates the cluster, sets up replicas, configures
    multi-zone automatic failover and automatic backup.
  submodules:
    - name: redis
      blurb: deploy Redis on ElastiCache
      description: Deploy a Redis cluster on top of ElastiCache. Includes support for automatic failover, backup, patches, and cluster scaling.
    - name: memcached
      blurb: deploy mecached on ElastiCache
      description: Deploy a Memcached cluster on top of ElastiCache.

- name: "Stateful Server"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/module-server"
  subscriber_url: "https://github.com/gruntwork-io/module-server"
  type: Subscriber-Only
  description: |
    Set up a best-practices deployment of a single, stateful server on top of AWS, such as Jenkins or WordPress. Supports
    EBS volume re-attachment, and a scheduled Lambda job to backup the Instance on a cron schedule. Includes alarm if
    backup jobs fail.
  submodules:
    - name: single-server
      blurb: deploy an EC2 instance
      description: Run a server in AWS and configure its IAM role, security group, optional Elastic IP Address (EIP), and optional DNS A record in Route 53.
    - name: attach-eni
      blurb: attach an ENI to a server
      description: Attach an Elastic Network Interface (ENI) to a server during boot. This is useful when you need to maintain a pool of IP addresses that remain static even as the underlying servers are replaced.
    - name: persistent-ebs-volume
      blurb: attach and mount an EBS volume to a server
      description: Attach and mount an EBS Volume in a server during boot. This is useful when you want to maintain data on a hard disk even as the underlying server is replaced.
    - name: route53-helpers
      blurb: attach a DNS record in Route 53 to a server
      description: Attach a DNS A record in Route 53 to a server during boot. This is useful when you want a pool of domain names that remain static even as the underlying servers are replaced.

- name: "AWS Static Assets"
  icons:
    - title: Terraform
      image: icon-terraform.png
  docs_url: "https://gruntwork.io/repos/package-static-assets"
  subscriber_url: "https://github.com/gruntwork-io/package-static-assets"
  type: Subscriber-Only
  description: |
    Deploy your static content and static websites on S3, optionally with a CloudFront distribution in front of it as a
    CDN. Includes bucket versioning, access logging, cache settings, Route 53 DNS entries, and TLS certs.
  submodules:
    - name: s3-static-website
      blurb: deploy a static website on S3
      description: Create an S3 bucket to host a static website. Includes support for custom routing rules and custom domain names.
    - name: s3-cloudfront
      blurb: deploy CloudFront as a CDN
      description: Deploy a CloudFront distribution as a CDN in front of an S3 bucket. Includes support for custom caching rules, custom domain names, and SSL.

- name: "MongoDB Cluster"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/package-mongodb"
  subscriber_url: "https://github.com/gruntwork-io/package-mongodb"
  type: Subscriber-Only
  description: |
    Deploy a MongoDB cluster, including replica sets, sharding, an automated bootstrapping process, backup, recovery,
    and OS optimizations.
  submodules:
    - name: install-mongodb
      blurb: install MongoDB
      description: Install MongoDB and all of its dependencies on a Linux server.
    - name: run-mongodb
      blurb: configure and run MongoDB
      description: Boot up a mongod, mongos, or mongo config server. Meant to be used in the User Data of the servers in your MongoDB cluster.
    - name: mongodb-cluster
      blurb: run a MongoDB cluster
      description: Run a MongoDB cluster using an Auto Scaling Group (ASG) and configure its IAM role, security group, EBS Volume, ENI, and private domain name.
    - name: backup-mongodb
      blurb: back up MongoDB
      description: Back up the data in your MongoDB cluster to S3.
    - name: init-mongodb
      blurb: configure a MongoDB replica set
      description: Configure a MongoDB replica set.

- name: "Kafka"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/package-kafka"
  subscriber_url: "https://github.com/gruntwork-io/package-kafka"
  type: Subscriber-Only
  description: |
    Deploy a cluster of Apache brokers that can automatically bootstrap themselves. Includes support for automatically
    discovering a ZooKeeper cluster, EBS Volumes for better log performance, automated zero-downtime rolling deployment,
    end-to-end encryption, OS optimizations, and security groups and IAM policy configuration.
  submodules:
    - name: install-kafka
      blurb: install Kafka
      description: Install Kafka and its dependencies on a Linux server.
    - name: kafka-cluster
      blurb: deploy a cluster of Kafka brokers
      description: Deploy a Kafka cluster using the server-group module from the AMI Cluster Infrastructure Package. Includes support for EBS Volumes for the Kafka log.
    - name: confluent-tools-cluster
      blurb: deploy a cluster for Confluent tools
      description: Run a cluster of Confluent tools (REST Proxy, Schema Registry, Kafka Connect).
    - name: install-confluent-tools
      blurb: install Confluent tools
      description: Install Confluent tools (REST Proxy and Schema Registry) on Linux.
    - name: run-kafka-connect
      blurb: configure and run Kafka Connect
      description: Configure and run Kafka Connect.
    - name: run-kafka-rest
      blurb: configure and run Kafka REST proxy
      description: Configure and run Kafka REST Proxy.
    - name: run-schema-registry
      blurb: configure and run Schema Registry
      description: Configure and run Schema Registry.

- name: "ZooKeeper"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/package-zookeeper"
  subscriber_url: "https://github.com/gruntwork-io/package-zookeeper"
  type: Subscriber-Only
  description: |
    Deploy an Apache ZooKeeper cluster that can automatically bootstrap itself. Includes support for Exhibitor as a
    process supervisor and management UI for ZooKeeper, static IP addresses (ENIs), EBS Volumes for better transaction
    log performance, automated zero-downtime rolling deployment, automatic recovery of failed servers, and security
    groups and IAM policy configuration.
  submodules:
    - name: install-zookeeper
      blurb: install ZooKeeper
      description: Install ZooKeeper and its dependencies on a Linux server.
    - name: install-exhibitor
      blurb: install Exhibitor
      description: Install Exhibitor and its dependencies on a Linux server.
    - name: install-openjdk
      blurb: install OpenJDK
      description: Install OpenJDK on a Linux server
    - name: run-exhibitor
      blurb: configure and run Exhibitor and ZooKeeper
      description: Configure and run Exhibitor and ZooKeeper on a Linux server
    - name: run-health-checker
      blurb: run a ZooKeeper health check
      description: Run a custom health check for ZooKeeper. Used in conjunction with a load balancer to do zero-downtime rolling updates of the ZooKeeper cluster.
    - name: zookeeper-cluster
      blurb: deploy a ZooKeeper cluster
      description: Deploy a ZooKeeper cluster using the server-group module from the AMI Cluster Infrastructure Package. Includes support for EBS Volumes for the transaction log as well as a set of ENIs to provide static IP addresses to ZooKeeper clients.

- name: "ELK"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/package-elk"
  subscriber_url: "https://github.com/gruntwork-io/package-elk"
  type: Subscriber-Only
  description: |
    Deploy and manage an ELK cluster. Includes support for deploying separate Elasticsearch, Logstash and Kibana clusters,
    each with automated zero-downtime rolling deployment, automatic recovery of failed servers, and security
    groups and IAM policy configuration. Also contains scripts for setting up Filebeat and CollectD on an application
    server to ship off logs and machine metrics to Elasticsearch.
  submodules:
    - name: elasticsearch-cluster
      blurb: deploy an Elasticsearch cluster
      description: Deploy a cluster of Elasticsearch nodes with zero-downtime deployment and auto-recovery of failed nodes.
    - name: kibana-cluster
      blurb: deploy a Kibana cluster
      description: Deploy a cluster of Kibana nodes with zero-downtime deployment and auto-recovery of failed nodes.
    - name: logstash-cluster
      blurb: deploy a Logstash cluster
      description: Deploy a cluster of Logstash nodes with zero-downtime deployment and auto-recovery of failed nodes.
    - name: elastalert
      blurb: configure and run ElastAlert on a server
      description: Runs ElastAlert in an instance, which makes API calls to the Elasticsearch cluster and sends alerts based on pre-defined data pattern rules.
    - name: run-filebeat
      blurb: configure and run Filebeat on a server
      description: Runs Filebeat on an application server to ship application logs off to Logstash cluster.
    - name: run-collectd
      blurb: configure and run CollectD on a server
      description: Runs CollectD on an application server and ships off machine metrics to th Logstash cluster.

- name: "OpenVPN Server"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
    - title: Go
      image: icon-go.png
  docs_url: "https://gruntwork.io/repos/package-openvpn"
  subscriber_url: "https://github.com/gruntwork-io/package-openvpn"
  type: Subscriber-Only
  description: |
    Deploy an OpenVPN server and manage user accounts using IAM groups. Includes automatic install and configuration of
    a high-availability OpenVPN server, public key infrastructure (PKI), data backup, IAM policies, security groups, and
    cross-platform apps to automatically request and revoke credentials.
  submodules:
    - name: install-openvpn
      blurb: install OpenVPN on a Linux server
      description: Install OpenVPN and its dependencies on a Linux server.
    - name: init-openvpn
      blurb: initialize OpenVPN, PKI, and CA
      description: Initialize an OpenVPN server, including its Public Key Infrastructure (PKI), Certificate Authority (CA) and configuration.
    - name: openvpn-admin
      blurb: CLI tool to manage OpenVPN certs
      description: A command-line utility that allows users to request new certificates, administrators to revoke certificates and the OpenVPN server to process those requests. All access and permissions are controlled via IAM.
    - name: openvpn-server
      blurb: deploy an OpenVPN server
      description: Deploy an OpenVPN server and configure its IAM role, security group, Elastic IP Address (EIP), S3 bucket for storage, and SQS queues.

- name: "Messaging"
  icons:
    - title: Terraform
      image: icon-terraform.png
  docs_url: "https://gruntwork.io/repos/package-messaging"
  subscriber_url: "https://github.com/gruntwork-io/package-messaging"
  type: Subscriber-Only
  description: |
    Create SQS queues with support for FIFO, message retention, message delays, content-based deduplication,
    dead-letter queues, and IP-based access controls. Create SNS topics with configurable IAM and delivery policies.
    Create Kinesis streams with configurable or auto-calculated shard and retention settings.
  submodules:
    - name: sqs
      blurb: create an SQS queue
      description: Create an SQS queue. Includes support for FIFO, dead letter queues, and IP-limiting.
    - name: sns
      blurb: create an SNS topic
      description: Create an SNS topic as well as the publisher and subscriber policies for that topic.
    - name: kinesis
      blurb: create a Kinesis stream
      description: Create a Kinesis stream and configure its sharding settings.

- name: "kubergrunt"
  icons:
    - title: Go
      image: icon-go.png
  public_url: "https://github.com/gruntwork-io/kubergrunt"
  type: Open Source
  description: |
    kubergrunt is a standalone go binary with a collection of commands that attempts to fill in the gaps between
    Terraform, Helm, and Kubectl for managing a Kubernetes Cluster. It includes support for authenticating to EKS
    clusters, managing Helm, and generating and securely storing TLS certificates.

- name: "Consul"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/hashicorp/terraform-aws-consul"
  type: Open Source
  description: |
    Deploy a best-practices HashiCorp Consul cluster. Includes support for automatic bootstrapping, configuring dnsmasq
    to use Consul as a DNS server, access to the Consul UI, and automatic recovery of failed servers.
  submodules:
    - name: install-consul
      blurb: install Consul on a Linux server
      description: Install Consul and its dependencies on a Linux server.
    - name: install-dnsmasq
      blurb: install dnsmasq on a Linux server
      description: Install dnsmasq on a Linux server and configure it to work with Consul as a DNS server. This allows you to use domain names such as my-app.service.consul.
    - name: run-consul
      blurb: configure and run Consul
      description: Run Consul and automatically bootstrap the cluster.

- name: "Nomad"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/hashicorp/terraform-aws-nomad"
  type: Open Source
  description: |
    Deploy a best-practices HashiCorp Nomad cluster. Includes support for automatic bootstrapping, automatic discovery
    of Consul servers (for cluster coordination), automatic recovery of failed servers.
  submodules:
    - name: install-nomad
      blurb: install Nomad on a Linux server
      description: Install Nomad and its dependencies on a Linux server.
    - name: run-nomad
      blurb: configure and run Nomad
      description: Run Nomad and automatically connect to a Consul cluster.

- name: "Vault"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/hashicorp/terraform-aws-vault"
  type: Open Source
  description: |
    Deploy a best-practices HashiCorp Vault cluster for secrets management. Includes support for automatic
    bootstrapping, automatic discovery of Consul clusters (for HA cluster coordination), using S3 as a storage backend,
    creating self-signed TLS certificates, updating the OS certificate store, configuring an ELB in front of Vault to
    allow public access, and automatic recovery of failed servers.
  submodules:
    - name: install-vault
      blurb: install Vault on a Linux server
      description: Install Vault and its dependencies on a Linux server.
    - name: run-vault
      blurb: configure and run Vault
      description: Run Vault and automatically connect to a Consul cluster.
    - name: private-tls-cert
      blurb: generate a self-signed TLS cert
      description: Generate self-signed TLS certificates for use with Vault.

- name: "Couchbase"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/gruntwork-io/terraform-aws-couchbase"
  type: Open Source
  description: |
    Deploy a best-practices Couchbase cluster. Includes support for automatic bootstrapping, running Sync Gateway,
    Web Console UI, cross-region replication, and automatic recovery of failed servers.
  submodules:
    - name: install-couchbase-server
      blurb: install Couchbase on a Linux server
      description: Install Couchbase and its dependencies on a Linux server.
    - name: install-sync-gateway
      blurb: install Sync Gateway on a Linux server
      description: Install Sync Gateway and its dependencies on a Linux server.
    - name: run-couchbase-server
      blurb: configure and run Couchbase
      description: Configure and run Couchbase.
    - name: run-sync-gateway
      blurb: configure and run Sync Gateway
      description: Configure and start Sync Gateway.
    - name: couchbase-cluster
      blurb: deploy a Couchbase cluster
      description: Deploy a Couchbase cluster on AWS using an Auto Scaling Group.

- name: "Influx AWS"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/gruntwork-io/terraform-aws-influx"
  type: Open Source
  description: |
    Deploy a best-practices TICK stack (Telegraf, InfluxDB, Chronograf, Kapacitor). Includes support for automatic
    bootstrapping, automatic node discovery, and automatic recovery of failed servers.
  submodules:
    - name: chronograf-server
      blurb: deploy a Chronograf server
      description: deploy a Chronograf server
    - name: influxdb-cluster
      blurb: deploy an InfluxDB cluster
      description: deploy an InfluxDB cluster
    - name: install-chronograf
      blurb: install Chronograf on a Linux server
      description: install Chronograf on a Linux server
    - name: install-influxdb
      blurb: install InfluxDB on a Linux server
      description: install InfluxDB on a Linux server
    - name: install-kapacitor
      blurb: install Kapacitor on a Linux server
      description: install Kapacitor on a Linux server
    - name: install-telegraf
      blurb: install Telegraf on a Linux server
      description: install Telegraf on a Linux server
    - name: kapacitor-server
      blurb: deploy a Kapacitor server
      description: deploy a Kapacitor server
    - name: run-chronograf
      blurb: configure and run Chronograf
      description: configure and run Chronograf
    - name: run-influxdb
      blurb: configure and run InfluxDB
      description: configure and run InfluxDB
    - name: run-kapacitor
      blurb: configure and run Kapacitor
      description: configure and run Kapacitor
    - name: run-telegraf
      blurb: configure and run Telegraf
      description: configure and run Telegraf

- name: "Terratest"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Go
      image: icon-go.png
  public_url: "https://github.com/gruntwork-io/terratest"
  type: Open Source
  description: |
    Terratest is a Go library that makes it easier to write automated tests for your infrastructure code. It provides
    a variety of helper functions and patterns for common infrastructure testing tasks, including testing Terraform
    code, Packer templates, Docker images, working with AWS, executing commands over SSH, and much more.

- name: "gruntkms"
  icons:
    - title: Go
      image: icon-go.png
  docs_url: "https://gruntwork.io/repos/gruntkms"
  subscriber_url: "https://github.com/gruntwork-io/gruntkms"
  type: Subscriber-Only
  description: |
    Make secrets management easy using this command-line tool that can encrypt and decrypt data using Amazon Key
    Management Service (KMS).

- name: "ssh-grunt"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Go
      image: icon-go.png
  docs_url: "https://gruntwork.io/repos/module-security/modules/ssh-grunt/README.adoc"
  subscriber_url: "https://github.com/gruntwork-io/module-security/tree/master/modules/ssh-grunt"
  type: Subscriber-Only
  description: |
    A tool that allows you to manage SSH access to EC2 Instances using either AWS IAM or your Identity Provider (e.g.,
    ADFS, Google, Okta, etc). Developers can use their personal SSH keys to log in.

- name: "aws-auth"
  icons:
    - title: Bash
      image: icon-bash.png
  docs_url: "https://gruntwork.io/repos/module-security/modules/aws-auth/README.md"
  subscriber_url: "https://github.com/gruntwork-io/module-security/tree/master/modules/aws-auth"
  type: Subscriber-Only
  description: |
    A small wrapper script for the AWS CLI that makes it much easier to authenticate to AWS with Multi-factor
    authentication (MFA), or when you want to assume an IAM Role in another AWS account.

- name: "bash-commons"
  icons:
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/gruntwork-io/bash-commons"
  type: Open Source
  description: |
    A collection of reusable Bash functions for handling common tasks such as logging, assertions, string manipulation,
    and more.

- name: "cloud-nuke"
  icons:
    - title: Go
      image: icon-go.png
  public_url: "https://github.com/gruntwork-io/cloud-nuke"
  type: Open Source
  description: |
    A tool for cleaning up your cloud accounts by nuking (deleting) all resources within it.

- name: "gruntwork-installer"
  icons:
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/gruntwork-io/gruntwork-installer"
  type: Open Source
  description: |
    A simple, lightweight package manager for installing Gruntwork modules.

- name: "fetch"
  icons:
    - title: Go
      image: icon-go.png
  public_url: "https://github.com/gruntwork-io/fetch"
  type: Open Source
  description: |
    A tool that makes it easy to download files, folders, and release assets from a specific git commit, branch, or tag
    of public and private GitHub repos.

- name: "pre-commit"
  icons:
    - title: Bash
      image: icon-bash.png
  public_url: "https://github.com/gruntwork-io/pre-commit"
  type: Open Source
  description: |
    A collection of pre-commit hooks for Terraform, bash, Go, and more.

- name: "gruntwork"
  icons:
    - title: Go
      image: icon-go.png
  docs_url: "https://gruntwork.io/repos/gruntwork"
  subscriber_url: "https://github.com/gruntwork-io/gruntwork"
  type: Subscriber-Only
  description: |
    A CLI tool to perform Gruntwork tasks, such as bootstrapping your GitHub and AWS accounts for the Reference
    Architecture.

- name: "package-terraform-utilities"
  icons:
    - title: Terraform
      image: icon-terraform.png
    - title: Python
      image: icon-python.png
  public_url: "https://github.com/gruntwork-io/package-terraform-utilities"
  type: Open Source
  description: |
    A collection of miscellaneous utilities and helper modules for use with Terraform. Includes modules for determining
    the current operating system and running Python/PEX executables from Terraform.
  submodules:
    - name: join-path
      blurb: join paths with the proper separator
      description: Join a list of given path parts (that is, file and folder names) into a single path with the appropriate path separator (backslash or forward slash) for the current operating system.
    - name: operating-system
      blurb: determine the operating system
      description: Figure out what operating system is being used to run Terraform from inside your Terraform code.
    - name: require-executable
      blurb: ensure an executable is installed
      description: Verify an executable exists on the host system, and emit a friendly error message if it does not.
    - name: run-pex-as-data-source
      blurb: run a Python (pex) script as a data source
      description: Run a python script with dependencies packaged together as an external data source in a portable way.
    - name: run-pex-as-resource
      blurb: run a Python (pex) script as a data source
      description: Run a python script with dependencies packaged together as a local-exec provisioner on a null resource in a portable way.
